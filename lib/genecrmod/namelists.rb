{:in_out=>
  {:description=>"",
   :should_include=>"true",
   :variables=>
    {:diagdir=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:diagdir,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :chptdir=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:chptdir,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :read_checkpoint=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:read_checkpoint,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :write_checkpoint=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:write_checkpoint,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :many_chpts=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:many_chpts,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :istep_schpt=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_schpt,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_field=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_field,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_mom=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_mom,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_nrg=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_nrg,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_neoclass=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_neoclass,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_vsp=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_vsp,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_omega=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_omega,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_g1=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_g1,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_prof=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_prof,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :write_fielddiff=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:write_fielddiff,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :mm_format=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:mm_format,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :istep_energy=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_energy,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_energy3d=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_energy3d,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_dfout=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_dfout,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :write_geom=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:write_geom,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :istep_srcmom=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_srcmom,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :write_h5=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:write_h5,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :write_std=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:write_std,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :chpt_h5=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:chpt_h5,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :chpt_read_h5=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:chpt_read_h5,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :chpt_write_h5=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:chpt_write_h5,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :istep_nlt=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_nlt,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_gav=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_gav,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :write_flux_final=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:write_flux_final,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_gyroles=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_gyroles,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_fe_time=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_fe_time,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_fe_twod=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_fe_twod,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :istep_fe_transfer=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_fe_transfer,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :avg_window=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:avg_window,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :iterdb_file=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:iterdb_file,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :iterdb_time=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:iterdb_time,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :momentum_flux=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:momentum_flux,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :istep_fsa_moments=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_fsa_moments,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :cat_output=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:cat_output,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :istep_nlev=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:istep_nlev,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer}}},
 :box=>
  {:description=>"",
   :should_include=>"true",
   :variables=>
    {:nx0=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nx0,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :nky0=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nky0,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :nz0=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nz0,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :nv0=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nv0,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :nw0=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nw0,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :n_spec=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_spec,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :lx=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lx,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :lx_a=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lx_a,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :kymin=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:kymin,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :lv=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lv,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :lw=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lw,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :ky0_ind=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ky0_ind,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :kx_center=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:kx_center,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :nexc=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nexc,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :adapt_lx=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:adapt_lx,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :adapt_ly=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:adapt_ly,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :x0=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:x0,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :mu_grid_type=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:mu_grid_type,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :n0_global=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n0_global,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer}}},
 :general=>
  {:description=>"",
   :should_include=>"true",
   :variables=>
    {:nonlinear=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nonlinear,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :parallel_nl=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:parallel_nl,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :x_local=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:x_local,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :y_local=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:y_local,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :lilo=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lilo,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :comp_type=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:comp_type,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :perf_vec=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:perf_vec,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :nblocks=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nblocks,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :parscheme=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:parscheme,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :turbdeal=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:turbdeal,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :precomp_nc=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:precomp_nc,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :include_f0_contr=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:include_f0_contr,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :timescheme=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:timescheme,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :calc_dt=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:calc_dt,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :dt_max=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:dt_max,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :courant=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:courant,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :coll_split=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:coll_split,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :coll_split_scheme=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:coll_split_scheme,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :n_ev=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_ev,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :which_ev=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:which_ev,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :ev_max_it=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ev_max_it,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :ev_shift=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ev_shift,
       :must_pass=>
        [{:test=>"kind_of? Complex",
          :explanation=>"This variable must be a complex number."}],
       :type=>:Complex},
     :ev_n_test=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ev_n_test,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :ev_prec=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ev_prec,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :vec_out_limit=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:vec_out_limit,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :ev_out=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ev_out,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :ev_left=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ev_left,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :ev_right=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ev_right,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :pc_type=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:pc_type,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :sub_pc_type=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:sub_pc_type,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :pc_sub_it=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:pc_sub_it,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :pc_factor_level=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:pc_factor_level,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :pc_blocks=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:pc_blocks,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :nc_prec=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nc_prec,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :nc_max_it=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nc_max_it,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :ntimesteps=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ntimesteps,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :timelim=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:timelim,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :simtimelim=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:simtimelim,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :overflow_limit=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:overflow_limit,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :underflow_limit=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:underflow_limit,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :omega_prec=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:omega_prec,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :beta=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:beta,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :debye2=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:debye2,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :delzonal=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:delzonal,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :delzonal_factor=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:delzonal_factor,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :delzonal_fields=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:delzonal_fields,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :bpar=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:bpar,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :bpar_off=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:bpar_off,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :pressure_term=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:pressure_term,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :pressure_off=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:pressure_off,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :apar0_antenna=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:apar0_antenna,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :omega0_antenna=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:omega0_antenna,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :del_phi=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:del_phi,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :del_fields=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:del_fields,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :only_er=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:only_er,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :trap_pass=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:trap_pass,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :tau=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:tau,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :no_electron_response=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:no_electron_response,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :coll=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:coll,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :collision_op=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:collision_op,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :coll_cons_model=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:coll_cons_model,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :spacediff=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:spacediff,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :spacediff_off=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:spacediff_off,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :coll_f_fm_on=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:coll_f_fm_on,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :zeff=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:zeff,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :adiabatic_mass=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:adiabatic_mass,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :init_cond=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:init_cond,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :init_aux_x=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:init_aux_x,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :init_aux_y=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:init_aux_y,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :init_aux_z=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:init_aux_z,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :init_aux_amp=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:init_aux_amp,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :init_vpar_fluct=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:init_vpar_fluct,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :hyp_x=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:hyp_x,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :hyp_x_order=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:hyp_x_order,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :hyp_y=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:hyp_y,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :hyp_y_order=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:hyp_y_order,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :hyp_perp=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:hyp_perp,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :hyp_perp_order=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:hyp_perp_order,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :hyp_z=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:hyp_z,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :hyp_z_order=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:hyp_z_order,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :hyp_v=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:hyp_v,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :hyp_on_h=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:hyp_on_h,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :hypz_opt=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:hypz_opt,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :gyroles=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:gyroles,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :fracx=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:fracx,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :fracy=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:fracy,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :diag_gyroles=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:diag_gyroles,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :tky=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:tky,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :tkx=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:tkx,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :tkperp=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:tkperp,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :n_shells_kperp=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_shells_kperp,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :t_log_kperp_fb=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:t_log_kperp_fb,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :tk3_log_kperp=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:tk3_log_kperp,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :tk3_ky=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:tk3_ky,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :tk3_kx=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:tk3_kx,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :t_log_kperp=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:t_log_kperp,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :t_log_ky=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:t_log_ky,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :n_shells_log_kperp=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_shells_log_kperp,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :n_shells_log_ky=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_shells_log_ky,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :tk3_log_kperp_1=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:tk3_log_kperp_1,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :tk3_log_kperp_h=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:tk3_log_kperp_h,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :t_log_kperp_1=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:t_log_kperp_1,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :n_shells_log_kperp_1=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_shells_log_kperp_1,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :lambda1=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lambda1,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :lambda2=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lambda2,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :with_nvp=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:with_nvp,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :coeff_g1_en_source=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:coeff_g1_en_source,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :perf_tsteps=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:perf_tsteps,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :arakawa_zv=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:arakawa_zv,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :arakawa_cons_bc=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:arakawa_cons_bc,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :arakawa_zv_order=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:arakawa_zv_order,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :fourier2d=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:fourier2d,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :yx_order=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:yx_order,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :diag_blev=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:diag_blev,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :diag_trap_levels=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:diag_trap_levels,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :avgflux_stime=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:avgflux_stime,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :avgprof_stime=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:avgprof_stime,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :avgflux_type=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:avgflux_type,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :avgflux_alpha=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:avgflux_alpha,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :gav_stime=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:gav_stime,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :gpu_cpu_ratio=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:gpu_cpu_ratio,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :which_func_as=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:which_func_as,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer}}},
 :extended_diags=>
  {:description=>"",
   :should_include=>"true",
   :variables=>
    {:which_ky=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:which_ky,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :num_ky_modes=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:num_ky_modes,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :num_kx_modes=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:num_kx_modes,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :which_kx_center=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:which_kx_center,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :dfout_mpiio=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:dfout_mpiio,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :svd_proj=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_proj,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :svd_kx_ind=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_kx_ind,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :svd_ky_ind=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_ky_ind,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :svd_nkx0=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_nkx0,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :svd_df_n_time=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_df_n_time,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :svd_start_time=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_start_time,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :svd_sparse_factor=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_sparse_factor,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :svd_df_file_name=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_df_file_name,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :svd_f0_flag=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_f0_flag,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :svd_df_file_path=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_df_file_path,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :svd_df_file_suffix=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_df_file_suffix,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :svd_n_restarts=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_n_restarts,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :svd_pbc_phase=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_pbc_phase,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :svd_parallel=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_parallel,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :svd_field_mom=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_field_mom,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :svd_swap_endian=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:svd_swap_endian,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :num_nlt_modes=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:num_nlt_modes,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :kx_nlt_ind=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:kx_nlt_ind,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :ky_nlt_ind=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ky_nlt_ind,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :nlt_symmetrize=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nlt_symmetrize,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :nx0_nlt_pod=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nx0_nlt_pod,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :num_nlt_pod_modes=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:num_nlt_pod_modes,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :nlt_pod=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nlt_pod,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :nlev_stime=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nlev_stime,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :n_nlev=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_nlev,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer}}},
 :nonlocal_x=>
  {:description=>"",
   :should_include=>"true",
   :variables=>
    {:rad_bc_type=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:rad_bc_type,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :dealiasing=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:dealiasing,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :pbc_dealiasing=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:pbc_dealiasing,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :lag_order=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lag_order,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :gyroav_in_xi_eta=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:gyroav_in_xi_eta,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :arakawa=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:arakawa,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :shifted_metric=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:shifted_metric,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :ck_heat=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ck_heat,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :ck_part=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ck_part,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :ck_heat_smooth=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ck_heat_smooth,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :ck_part_smooth=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ck_part_smooth,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :ck_filter_type=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ck_filter_type,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :l_buffer_size=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:l_buffer_size,
       :must_pass=>[{:test=>nil, :explanation=>nil}],
       :type=>nil},
     :lcoef_krook=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lcoef_krook,
       :must_pass=>[{:test=>nil, :explanation=>nil}],
       :type=>nil},
     :lpow_krook=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lpow_krook,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :u_buffer_size=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:u_buffer_size,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :ucoef_krook=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ucoef_krook,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :upow_krook=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:upow_krook,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :buffer_on_ky0=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:buffer_on_ky0,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :lck_buffer_size=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lck_buffer_size,
       :must_pass=>[{:test=>nil, :explanation=>nil}],
       :type=>nil},
     :lckcoef_krook=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lckcoef_krook,
       :must_pass=>[{:test=>nil, :explanation=>nil}],
       :type=>nil},
     :lckpow_krook=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lckpow_krook,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :uck_buffer_size=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:uck_buffer_size,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :uckcoef_krook=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:uckcoef_krook,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :uckpow_krook=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:uckpow_krook,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :puls_start=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:puls_start,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :puls_amp=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:puls_amp,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :puls_on_duration=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:puls_on_duration,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :puls_off_duration=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:puls_off_duration,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :reset_limit=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:reset_limit,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :smooth_reset=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:smooth_reset,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :smooth_reset_type=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:smooth_reset_type,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :drive_buffer=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:drive_buffer,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :explicit_buffer=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:explicit_buffer,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :psource_type=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:psource_type,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :intsource_heat_coeff=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:intsource_heat_coeff,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :intsource_part_coeff=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:intsource_part_coeff,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :intsource_time=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:intsource_time,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :ga_spatial_var=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ga_spatial_var,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool}}},
 :external_contr=>
  {:description=>"",
   :should_include=>"true",
   :variables=>
    {:phi0_ext=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:phi0_ext,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :kxind_phi_ext=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:kxind_phi_ext,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :phase_phi_ext=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:phase_phi_ext,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :omt0_ext=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:omt0_ext,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :kxind_omt_ext=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:kxind_omt_ext,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :phase_omt_ext=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:phase_omt_ext,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :omn0_ext=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:omn0_ext,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :kxind_omn_ext=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:kxind_omn_ext,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :phase_omn_ext=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:phase_omn_ext,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :exbrate=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:exbrate,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :pfsrate=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:pfsrate,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :exb_stime=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:exb_stime,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :erad=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:erad,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :upar0=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:upar0,
       :must_pass=>[{:test=>nil, :explanation=>nil}],
       :type=>nil}}},
 :geometry=>
  {:description=>"",
   :should_include=>"true",
   :variables=>
    {:magn_geometry=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:magn_geometry,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :shat=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:shat,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :limit_shat=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:limit_shat,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :parscale=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:parscale,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :q0=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:q0,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :major_r=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:major_r,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :minor_r=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:minor_r,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :major_z=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:major_z,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :trpeps=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:trpeps,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :amhd=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:amhd,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :geomdir=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:geomdir,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :geomfile=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:geomfile,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :x_def=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:x_def,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :flux_pos=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:flux_pos,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :rhostar=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:rhostar,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :mag_prof=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:mag_prof,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :q_coeffs=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:q_coeffs,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :n_pol=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_pol,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :edge_opt=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:edge_opt,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :norm_flux_projection=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:norm_flux_projection,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :psi_o_twopi=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:psi_o_twopi,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :q_scalefac=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:q_scalefac,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :force_x=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:force_x,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :force_z=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:force_z,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :kappa=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:kappa,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :delta=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:delta,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :rho=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:rho,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :s_kappa=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:s_kappa,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :s_delta=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:s_delta,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :drr=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:drr,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :drz=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:drz,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :zeta=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:zeta,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :s_zeta=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:s_zeta,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :dpdx_term=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:dpdx_term,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :dpdx_pm=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:dpdx_pm,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :bprof_coeffs=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:bprof_coeffs,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float}}},
 :species=>
  {:description=>"",
   :should_include=>"true",
   :enumerator=>{:name=>:n_spec, :estimated_value=>5},
   :variables=>
    {:name=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:name,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :passive=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:passive,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :omn=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:omn,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :omt=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:omt,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :mass=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:mass,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :charge=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:charge,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :temp=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:temp,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :dens=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:dens,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :kappa_t=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:kappa_t,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :lt_center=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lt_center,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :lt_width=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lt_width,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :kappa_n=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:kappa_n,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :ln_center=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ln_center,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :ln_width=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:ln_width,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :delta_x_t=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:delta_x_t,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :delta_x_n=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:delta_x_n,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :prof_type=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:prof_type,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :src_amp=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:src_amp,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :src_width=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:src_width,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :src_x0=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:src_x0,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :src_prof_type=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:src_prof_type,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :prof_file=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:prof_file,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String}}},
 :units=>
  {:description=>"",
   :should_include=>"true",
   :variables=>
    {:tref=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:tref,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :nref=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nref,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :lref=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lref,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :bref=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:bref,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :mref=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:mref,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :vtorref=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:vtorref,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :norm_index=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:norm_index,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer}}},
 :adaptivity=>
  {:description=>"",
   :should_include=>"true",
   :variables=>
    {:is_grid_adptv=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:is_grid_adptv,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :is_numofvpoints_const=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:is_numofvpoints_const,
       :must_pass=>
        [{:test=>"kind_of? String and FORTRAN_BOOLS.include? self",
          :explanation=>
           "This variable must be a fortran boolean. (In Ruby this is represented as a string: e.g. '.true.')"}],
       :type=>:Fortran_Bool},
     :n_vx_blks=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_vx_blks,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :n_wx_blks=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_wx_blks,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :prob_vx=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:prob_vx,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :prob_wx=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:prob_wx,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :opt_mthd_vx=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:opt_mthd_vx,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :opt_mthd_wx=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:opt_mthd_wx,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :blk_mks_r_v=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:blk_mks_r_v,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :blk_mks_v=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:blk_mks_v,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :blk_mks_r_w=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:blk_mks_r_w,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :blk_mks_w=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:blk_mks_w,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float}}},
 :parallelization=>
  {:description=>"",
   :should_include=>"true",
   :variables=>
    {:n_procs_s=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_procs_s,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :n_procs_w=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_procs_w,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :n_procs_v=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_procs_v,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :n_procs_z=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_procs_z,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :n_procs_y=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_procs_y,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :n_procs_x=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_procs_x,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :n_procs_sim=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_procs_sim,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :n_parallel_sims=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_parallel_sims,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :max_nps=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:max_nps,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :max_npw=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:max_npw,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :max_npv=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:max_npv,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :max_npz=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:max_npz,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :max_npy=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:max_npy,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :max_npx=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:max_npx,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :min_nps=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:min_nps,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :min_npw=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:min_npw,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :min_npv=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:min_npv,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :min_npz=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:min_npz,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :min_npy=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:min_npy,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :min_npx=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:min_npx,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer}}},
 :parameters=>
  {:description=>"",
   :should_include=>"true",
   :variables=>
    {:q0_pars=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:q0,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :gridpoints=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:gridpoints,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :shat_pars=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:shat,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :n_pol_pars=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_pol,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :my_dpdx=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:my_dpdx,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :my_currdens_par=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:my_currdens_par,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :beta_pars=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:beta,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :units_pars=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:tref,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :nref_pars=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nref,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :bref_pars=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:bref,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :Lef_pars=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:lref,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :cy=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:cy,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :cxy=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:cxy,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :magn_geometry_pars=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:magn_geometry,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :n0_global_pars=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n0_global,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :s0=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:s0,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :nalpha0=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:nalpha0,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :trpeps_pars=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:trpeps,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float},
     :minor_r_pars=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:minor_r,
       :must_pass=>
        [{:test=>"kind_of? Numeric",
          :explanation=>
           "This variable must be a floating point number (an integer is also acceptable: it will be converted into a floating point number)."}],
       :type=>:Float}}},
 :scan=>
  {:description=>"",
   :should_include=>"true",
   :variables=>
    {:scan_dims=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:scan_dims,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer},
     :par_in_dir=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:par_in_dir,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :chpt_in=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:chpt_in,
       :must_pass=>
        [{:test=>"kind_of? String",
          :explanation=>"This variable must be a string."}],
       :type=>:String},
     :n_procs_sim_scan=>
      {:should_include=>"true",
       :description=>nil,
       :help=>nil,
       :code_name=>:n_procs_sim,
       :must_pass=>
        [{:test=>"kind_of? Integer",
          :explanation=>"This variable must be an integer."}],
       :type=>:Integer}}}}
